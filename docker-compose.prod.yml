# Docker Compose para Produção (Auto-hospedado com todos os serviços)
version: '3.8'

services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-prod
    restart: unless-stopped
    ports:
      - "${PORT:-5678}:5678"
    environment:
      # n8n configurações de produção
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      # Usar DATABASE_URL ou variáveis individuais
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - N8N_HOST=${RENDER_EXTERNAL_HOSTNAME:-localhost}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
      - N8N_PORT=${N8N_PORT:-443}
      - WEBHOOK_URL=${WEBHOOK_URL:-https://${RENDER_EXTERNAL_HOSTNAME}}
      - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL:-https://${RENDER_EXTERNAL_HOSTNAME}}
      - EXECUTIONS_MODE=regular
      - N8N_LOG_LEVEL=info
      - N8N_DEFAULT_TIMEZONE=America/Recife
      # Pacotes community - força instalação na inicialização
      - N8N_COMMUNITY_PACKAGES=n8n-nodes-evolution-api
      - N8N_COMMUNITY_PACKAGES_ENABLED=true
      - N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN=true
      - N8N_BLOCK_ENV_ACCESS_IN_NODE=false
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
      - redis
    networks:
      - prod_network

  postgres:
    image: postgres:15
    container_name: postgres-prod
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - prod_network

  redis:
    image: redis:alpine
    container_name: redis-prod
    restart: unless-stopped
    ports:
      - "6380:6379"
    networks:
      - prod_network

  evolution-api:
    image: evoapicloud/evolution-api:latest
    container_name: evolution-api-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Evolution API configurações de produção
      - AUTHENTICATION_API_KEY=${AUTHENTICATION_API_KEY}
      - SERVER_TYPE=http
      - SERVER_PORT=8080
      - CORS_ORIGIN=*
      - QRCODE_GENERATE=true
      - WEBSOCKET_ENABLED=true
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      - DATABASE_CONNECTION_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://redis:6379/6
      - CACHE_REDIS_PREFIX_KEY=evolution
      - CACHE_REDIS_SAVE_INSTANCES=false
      - CONFIG_SESSION_PHONE_VERSION=2.3000.1023204200
    volumes:
      - evolution_instances:/evolution/instances
    depends_on:
      - postgres
      - redis
    networks:
      - prod_network

  adminer:
    image: adminer
    container_name: adminer-prod
    restart: unless-stopped
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    networks:
      - prod_network

volumes:
  n8n_data:
  postgres_data:
  evolution_instances:

networks:
  prod_network:
    driver: bridge